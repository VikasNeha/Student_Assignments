from Project9.triangle import Triangle

print("\t------------------------------------------")
print("\tWELCOME TO TEST BED FOR PROJ 9 - TRIANGLES")
print("\t------------------------------------------")

print("------------------------------------------------------------------------------------")
print("TC1: Provide numeric values of sides to Constructor and check String representation of Triangle")
print("Creating a triangle with sides as 4, 6, 8")
t1 = Triangle(4, 6, 8)
print("The trianngle created is:", end=" ")
print(t1)

print("------------------------------------------------------------------------------------")
print("TC2: Provide non-numeric values of sides to Constructor - all sides should be set to 0")
print("Creating a triangle with sides as ab, 6, 8")
t1 = Triangle('ab', 6, 8)
print("The trianngle created is: ", end=" ")
print(t1)

print("------------------------------------------------------------------------------------")
print("TC3: If all sides are not greater than zero, triangle should not be valid")
print("Creating a triangle with sides as 0, 6, 8")
t1 = Triangle(0, 6, 8)
print("Is Triangle Valid?", end=" ")
print(t1.is_valid())

print("------------------------------------------------------------------------------------")
print("TC4: If sum of the shortest two sides is less than the third side, triangle should not be valid")
print("Creating a triangle with sides as 4, 6, 11")
t1 = Triangle(4, 6, 11)
print("Is Triangle Valid?", end=" ")
print(t1.is_valid())

print("------------------------------------------------------------------------------------")
print("TC5: If all sides are greater than 0 and sum of the shortest two sides is greater than the third side, triangle should be valid")
print("Creating a triangle with sides as 4, 6, 8")
t1 = Triangle(4, 6, 8)
print("Is Triangle Valid?", end=" ")
print(t1.is_valid())

print("------------------------------------------------------------------------------------")
print("TC6: Sides function should return a tuple containing the three sides")
print("Creating a triangle with sides as 4, 6, 8")
t1 = Triangle(4, 6, 8)
print("Sides of the Triangle are:", end=" ")
print(t1.sides())
print("Type of the return value of Sides function is:", end=" ")
print(type(t1.sides()))

print("------------------------------------------------------------------------------------")
print("TC7: Angles function should return a tuple containing the three interior angles for valid triangle")
print("Creating a triangle with sides as 4, 6, 8")
t1 = Triangle(4, 6, 8)
print("Is Triangle Valid?", end=" ")
print(t1.is_valid())
print("Angles of the Triangle are:", end=" ")
print(t1.angles())
print("Type of the return value of Angles function is:", end=" ")
print(type(t1.angles()))

print("------------------------------------------------------------------------------------")
print("TC8: Angles function should return a tuple containing None for invalid triangle")
print("Creating a triangle with sides as 4, 6, 11")
t1 = Triangle(4, 6, 11)
print("Is Triangle Valid?", end=" ")
print(t1.is_valid())
print("Angles of the Triangle are:", end=" ")
print(t1.angles())

print("------------------------------------------------------------------------------------")
print("TC9: Perimeter function should return the perimeter for valid triangle")
print("Creating a triangle with sides as 4, 6, 8")
t1 = Triangle(4, 6, 8)
print("Is Triangle Valid?", end=" ")
print(t1.is_valid())
print("Perimeter of the Triangle is:", end=" ")
print(t1.perimeter())

print("------------------------------------------------------------------------------------")
print("TC9: Perimeter function should return zero for invalid triangle")
print("Creating a triangle with sides as 4, 6, 11")
t1 = Triangle(4, 6, 11)
print("Is Triangle Valid?", end=" ")
print(t1.is_valid())
print("Perimeter of the Triangle is:", end=" ")
print(t1.perimeter())

print("------------------------------------------------------------------------------------")
print("TC10: Area function should return the area for valid triangle")
print("Creating a triangle with sides as 4, 6, 8")
t1 = Triangle(4, 6, 8)
print("Is Triangle Valid?", end=" ")
print(t1.is_valid())
print("Area of the Triangle is:", end=" ")
print(t1.area())

print("------------------------------------------------------------------------------------")
print("TC11: Area function should return zero for valid triangle")
print("Creating a triangle with sides as 4, 6, 11")
t1 = Triangle(4, 6, 11)
print("Is Triangle Valid?", end=" ")
print(t1.is_valid())
print("Area of the Triangle is:", end=" ")
print(t1.area())

print("------------------------------------------------------------------------------------")
print("TC12: Scale function should multiply each sides with given factor for valid triangle")
print("Creating a triangle with sides as 4, 6, 8")
t1 = Triangle(4, 6, 8)
print("Is Triangle Valid?", end=" ")
print(t1.is_valid())
print("Scaling sides to factor 0.5")
print("Old Sides: ", end=" ")
print(t1.sides())
t1.scale(0.5)
print("New Sides: ", end=" ")
print(t1.sides())

print("------------------------------------------------------------------------------------")
print("TC13: Scale function should not alter the sides for invalid triangle")
print("Creating a triangle with sides as 4, 6, 11")
t1 = Triangle(4, 6, 11)
print("Is Triangle Valid?", end=" ")
print(t1.is_valid())
print("Scaling sides to factor 0.5")
print("Old Sides: ", end=" ")
print(t1.sides())
t1.scale(0.5)
print("New Sides: ", end=" ")
print(t1.sides())

print("------------------------------------------------------------------------------------")
print("TC14: Scale function should not alter the sides if factor is not greater than 0")
print("Creating a triangle with sides as 4, 6, 8")
t1 = Triangle(4, 6, 8)
print("Is Triangle Valid?", end=" ")
print(t1.is_valid())
print("Scaling sides to factor 0")
print("Old Sides: ", end=" ")
print(t1.sides())
t1.scale(0)
print("New Sides: ", end=" ")
print(t1.sides())

print("------------------------------------------------------------------------------------")
print("TC15: Equilateral Triangle")
print("Creating a triangle with sides as 6, 6, 6")
t1 = Triangle(6, 6, 6)
print("Is Triangle Equilateral? ", end=" ")
print(t1.is_equilateral())
print("Is Triangle Isosceles? ", end=" ")
print(t1.is_isosceles())
print("Is Triangle Scalene? ", end=" ")
print(t1.is_scalene())

print("------------------------------------------------------------------------------------")
print("TC16: Isosceles Triangle")
print("Creating a triangle with sides as 6, 4, 6")
t1 = Triangle(6, 4, 6)
print("Is Triangle Equilateral? ", end=" ")
print(t1.is_equilateral())
print("Is Triangle Isosceles? ", end=" ")
print(t1.is_isosceles())
print("Is Triangle Scalene? ", end=" ")
print(t1.is_scalene())

print("------------------------------------------------------------------------------------")
print("TC17: Scalene Triangle")
print("Creating a triangle with sides as 6, 4, 8")
t1 = Triangle(6, 4, 8)
print("Is Triangle Equilateral? ", end=" ")
print(t1.is_equilateral())
print("Is Triangle Isosceles? ", end=" ")
print(t1.is_isosceles())
print("Is Triangle Scalene? ", end=" ")
print(t1.is_scalene())
